diff --git a/include/curl/curl.h b/include/curl/curl.h
index 49552558d..3aba7312f 100644
--- a/include/curl/curl.h
+++ b/include/curl/curl.h
@@ -645,6 +645,7 @@ typedef enum {
   CURLE_UNRECOVERABLE_POLL,      /* 99 - poll/select returned fatal error */
   CURLE_TOO_LARGE,               /* 100 - a value/data met its maximum */
   CURLE_ECH_REQUIRED,            /* 101 - ECH tried but failed */
+  CURLE_PING_TIMEOUT,            /* 102 - ping frame waiting timedout */
   CURL_LAST /* never use! */
 } CURLcode;
 
@@ -2259,6 +2260,11 @@ typedef enum {
   /* set TLS supported signature algorithms */
   CURLOPT(CURLOPT_SSL_SIGNATURE_ALGORITHMS, CURLOPTTYPE_STRINGPOINT, 328),
 
+  /* Function that will be called when HTTP2 PING FRAME has been
+     sent or received */
+  CURLOPT(CURLOPT_PING_FUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 329),
+  CURLOPT(CURLOPT_PING_DATA, CURLOPTTYPE_CBPOINT, 330),
+
   CURLOPT_LASTENTRY /* the last unused */
 } CURLoption;
 
@@ -2647,6 +2653,19 @@ curl_formadd(struct curl_httppost **httppost,
 typedef size_t (*curl_formget_callback)(void *arg, const char *buf,
                                         size_t len);
 
+#define CURL_PING_SEND        1
+#define CURL_PING_SENDERR     2
+#define CURL_PING_RECV        3
+#define CURL_PING_RECVACK     4
+#define CURL_PING_CONNOPEN    5
+#define CURL_PING_CONNCLOSE   6
+
+/*
+ * callback function for ping frame send/recv
+ */
+typedef void (*curl_ping_callback)(CURL *easy, void *userdata,
+                                       int action);
+
 /*
  * NAME curl_formget()
  *
diff --git a/lib/cfilters.c b/lib/cfilters.c
index 07f3c5f7b..260909823 100644
--- a/lib/cfilters.c
+++ b/lib/cfilters.c
@@ -511,6 +511,7 @@ CURLcode Curl_conn_connect(struct Curl_easy *data,
       cf_cntrl_update_info(data, data->conn);
       conn_report_connect_stats(data, data->conn);
       data->conn->keepalive = curlx_now();
+      data->set.fping_func(data, data->set.fping_userdata, CURL_PING_CONNOPEN);
 #ifndef CURL_DISABLE_VERBOSE_STRINGS
       result = cf_verboseconnect(data, cf);
 #endif
diff --git a/lib/conncache.c b/lib/conncache.c
index 1393bb565..b3c45c6e9 100644
--- a/lib/conncache.c
+++ b/lib/conncache.c
@@ -696,6 +696,8 @@ void Curl_conn_terminate(struct Curl_easy *data,
     Curl_cshutdn_terminate(cpool->idata, conn, !aborted);
   }
 
+  data->set.fping_func(data, data->set.fping_userdata, CURL_PING_CONNCLOSE);
+
   if(do_lock)
     CPOOL_UNLOCK(cpool, data);
 }
diff --git a/lib/easyoptions.c b/lib/easyoptions.c
index 03d676df0..c89be7216 100644
--- a/lib/easyoptions.c
+++ b/lib/easyoptions.c
@@ -191,6 +191,8 @@ const struct curl_easyoption Curl_easyopts[] = {
   {"OPENSOCKETFUNCTION", CURLOPT_OPENSOCKETFUNCTION, CURLOT_FUNCTION, 0},
   {"PASSWORD", CURLOPT_PASSWORD, CURLOT_STRING, 0},
   {"PATH_AS_IS", CURLOPT_PATH_AS_IS, CURLOT_LONG, 0},
+  {"PING_FUNCTION", CURLOPT_PING_FUNCTION, CURLOT_FUNCTION, 0},
+  {"PING_DATA", CURLOPT_PING_DATA, CURLOT_CBPTR, 0},
   {"PINNEDPUBLICKEY", CURLOPT_PINNEDPUBLICKEY, CURLOT_STRING, 0},
   {"PIPEWAIT", CURLOPT_PIPEWAIT, CURLOT_LONG, 0},
   {"PORT", CURLOPT_PORT, CURLOT_LONG, 0},
diff --git a/lib/http2.c b/lib/http2.c
index c526bf0fa..0501901cf 100644
--- a/lib/http2.c
+++ b/lib/http2.c
@@ -710,21 +710,26 @@ static CURLcode http2_send_ping(struct Curl_cfilter *cf,
                                 struct Curl_easy *data)
 {
   struct cf_h2_ctx *ctx = cf->ctx;
+  struct UserDefined *userd = &data->set;
   int rc;
 
   rc = nghttp2_submit_ping(ctx->h2, 0, ZERO_NULL);
   if(rc) {
     failf(data, "nghttp2_submit_ping() failed: %s(%d)",
           nghttp2_strerror(rc), rc);
-   return CURLE_HTTP2;
+    userd->fping_func(data, userd->fping_userdata, CURL_PING_SENDERR);
+    return CURLE_HTTP2;
   }
 
   rc = nghttp2_session_send(ctx->h2);
   if(rc) {
     failf(data, "nghttp2_session_send() failed: %s(%d)",
           nghttp2_strerror(rc), rc);
+    userd->fping_func(data, userd->fping_userdata, CURL_PING_SENDERR);
     return CURLE_SEND_ERROR;
   }
+
+  userd->fping_func(data, userd->fping_userdata, CURL_PING_SEND);
   return CURLE_OK;
 }
 
@@ -1314,6 +1319,7 @@ static int on_frame_recv(nghttp2_session *session, const nghttp2_frame *frame,
   struct Curl_cfilter *cf = userp;
   struct cf_h2_ctx *ctx = cf->ctx;
   struct Curl_easy *data = CF_DATA_CURRENT(cf), *data_s;
+  struct UserDefined *userd;
   int32_t stream_id = frame->hd.stream_id;
 
   DEBUGASSERT(data);
@@ -1327,6 +1333,8 @@ static int on_frame_recv(nghttp2_session *session, const nghttp2_frame *frame,
   }
 #endif /* !CURL_DISABLE_VERBOSE_STRINGS */
 
+  userd = &data->set;
+
   if(!stream_id) {
     /* stream ID zero is for connection-oriented stuff */
     DEBUGASSERT(data);
@@ -1358,6 +1366,11 @@ static int on_frame_recv(nghttp2_session *session, const nghttp2_frame *frame,
       }
       break;
     }
+    case NGHTTP2_PING:
+      userd->fping_func(data, userd->fping_userdata,
+                              CURL_PING_RECV
+                              + (frame->hd.flags & NGHTTP2_FLAG_ACK));
+      break;
     case NGHTTP2_GOAWAY:
       ctx->rcvd_goaway = TRUE;
       ctx->goaway_error = frame->goaway.error_code;
diff --git a/lib/setopt.c b/lib/setopt.c
index 3f628c443..7113cccde 100644
--- a/lib/setopt.c
+++ b/lib/setopt.c
@@ -2178,6 +2178,10 @@ static CURLcode setopt_cptr(struct Curl_easy *data, CURLoption option,
                                &s->str[STRING_INTERFACE],
                                &s->str[STRING_BINDHOST]);
 
+  case CURLOPT_PING_DATA:
+    s->fping_userdata = ptr;
+    break;
+
   case CURLOPT_PINNEDPUBLICKEY:
     /*
      * Set pinned public key for SSL connection.
@@ -2765,6 +2769,9 @@ static CURLcode setopt_func(struct Curl_easy *data, CURLoption option,
   case CURLOPT_PREREQFUNCTION:
     s->fprereq = va_arg(param, curl_prereq_callback);
     break;
+  case CURLOPT_PING_FUNCTION:
+    s->fping_func = va_arg(param, curl_ping_callback);
+    break;
   default:
     return CURLE_UNKNOWN_OPTION;
   }
diff --git a/lib/urldata.h b/lib/urldata.h
index 3c7e634b0..e0d050e51 100644
--- a/lib/urldata.h
+++ b/lib/urldata.h
@@ -1345,6 +1345,8 @@ struct UserDefined {
   void *prereq_userp; /* pre-initial request user data */
 
   void *seek_client;    /* pointer to pass to the seek callback */
+  curl_ping_callback fping_func; /* function for ping frame progress callback */
+  void *fping_userdata;
 #ifndef CURL_DISABLE_HSTS
   curl_hstsread_callback hsts_read;
   void *hsts_read_userp;
